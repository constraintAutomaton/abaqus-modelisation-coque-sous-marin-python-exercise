# -*- coding: utf-8 -*-from part import *from material import *from section import *from assembly import *from step import *from interaction import *from load import *from mesh import *from job import *from sketch import *from visualization import *from connectorBehavior import *import regionToolsetimport assemblyimport odbAccessdef main(list_materiau,differentiel_pression=12304.586*1000,epaisseur=1):    for propriete_materiau in list_materiau:        model_coque = mdb.models['Model-1']        model_coque = mdb.Model(name=propriete_materiau[-1], objectToCopy=mdb.models['Model-1'])        model_coque.ConstrainedSketch(name='__profile__', sheetSize=250.0)        sketch = model_coque.sketches['__profile__']          #######geometrie###############        sketch.ArcByCenterEnds(center=(16,0),point2=(0,0),point1=(16,16))        sketch.Line(point1=(16,16),point2=(100,16))        sketch.Line(point1=(100,16),point2=(154-12,12))        sketch.ArcByCenterEnds(center=(154-12,0),point2=(154-12,12),point1=(154,0))        sketch.Line(point1=(0,0),point2=(154,0))        sketch.assignCenterline(line=sketch.ConstructionLine(point1=(0,0),point2=(154,0)))        #######Revolution##############        p = model_coque.Part(name='Coque', dimensionality=THREE_D,             type=DEFORMABLE_BODY)        p = model_coque.parts['Coque']        p.BaseShellRevolve(sketch=sketch, angle=360)        #######Material et section################        model_coque.Material(name=propriete_materiau[-1])        materiau = model_coque.materials[propriete_materiau[-1]]        coefficient_poisson = propriete_materiau[1]        young_modulus =propriete_materiau[2]        materiau.Elastic(type=ISOTROPIC,table=((young_modulus,coefficient_poisson),))        model_coque.HomogeneousShellSection(material=propriete_materiau[-1], name=        'Section-1', thickness=epaisseur)        f = p.faces        faces_1 = f.findAt(((154, 0, 0),))        region_1 = regionToolset.Region(faces=faces_1)        p.SectionAssignment(region=region_1,sectionName='Section-1',offset=0.0)        faces_2 = f.findAt(((16, 16, 0),))        region_2 = regionToolset.Region(faces=faces_2)        p.SectionAssignment(region=region_2,sectionName='Section-1',offset=0.0)        faces_3 = f.findAt(((0, 0, 0),))        region_3 = regionToolset.Region(faces=faces_3)        p.SectionAssignment(region=region_3,sectionName='Section-1',offset=0.0)        faces_4 = f.findAt(((121, 14, 0),))        region_4 = regionToolset.Region(faces=faces_4)        p.SectionAssignment(region=region_4,sectionName='Section-1',offset=0.0)        #######Assembly################        model_coque.rootAssembly.Instance(name='assemblage',part=p,dependent=ON)        a = model_coque.rootAssembly        model_coque.rootAssembly.regenerate()        #######Step####################        model_coque.StaticStep(initialInc=0.1,maxInc=0.1,name='Step-1',previous='Initial')        #######mesh####################        p.seedPart(size=1)        p.generateMesh()        ##########BC##############        ''' Toutes les rotations sont contrainte'''        f = a.instances['assemblage'].faces        faces_1 = f.findAt(((154, 0, 0),))        region_assembly_1 = regionToolset.Region(faces=faces_1)        model_coque.DisplacementBC(name='Contrainte_rotation_1',createStepName='Step-1',region=region_assembly_1,ur1=0,ur2=0,ur3=0)        faces_2 = f.findAt(((16, 16, 0),))        region_assembly_2 = regionToolset.Region(faces=faces_2)        model_coque.DisplacementBC(name='Contrainte_rotation_2',createStepName='Step-1',region=region_assembly_2,ur1=0,ur2=0,ur3=0)        faces_3 = f.findAt(((0, 0, 0),))        region_assembly_3 = regionToolset.Region(faces=faces_3)        model_coque.DisplacementBC(name='Contrainte_rotation_3',createStepName='Step-1',region=region_assembly_3,ur1=0,ur2=0,ur3=0)        faces_4 = f.findAt(((121,14,0),))        region_assembly_4 = regionToolset.Region(faces=faces_4)        model_coque.DisplacementBC(name='Contrainte_rotation_4',createStepName='Step-1',region=region_assembly_4,ur1=0,ur2=0,ur3=0)        ##########Load##############        '''Pression appliquer partout'''        region_assembly_1 = regionToolset.Region(side1Faces=faces_1)        model_coque.Pressure(name='Pression_1',createStepName='Step-1',region=region_assembly_1,magnitude=differentiel_pression)        region_assembly_2 = regionToolset.Region(side1Faces=faces_2)        model_coque.Pressure(name='Pression_2',createStepName='Step-1',region=region_assembly_2,magnitude=differentiel_pression)        region_assembly_3 = regionToolset.Region(side1Faces=faces_3)        model_coque.Pressure(name='Pression_3',createStepName='Step-1',region=region_assembly_3,magnitude=differentiel_pression)        region_assembly_4 = regionToolset.Region(side1Faces=faces_4)        model_coque.Pressure(name='Pression_4',createStepName='Step-1',region=region_assembly_4,magnitude=differentiel_pression)        ###########job##############        a.regenerate()        job = mdb.Job(name=propriete_materiau[0],model=propriete_materiau[-1],type=ANALYSIS,description='Analyse pr√©liminaire')        job.submit()        job.waitForCompletion()                del model_coque.sketches['__profile__']acier = ['job_acier',0.25,200*10**9,'acier']titane = ['job_titane',0.342,113.8*10**9,'titane']aluminium = ['job_aluminium',0.33,68.9*10**9,'aluminum']main([acier,titane,aluminium])